<?php
/**
 * GetTransactionDetailsByTransactionIDFromCallbackRIBSTTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2023-04-25
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace com.cryptoapis.rest_apis.sdk\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * GetTransactionDetailsByTransactionIDFromCallbackRIBSTTest Class Doc Comment
 *
 * @category    Class
 * @description Tron
 * @package     com.cryptoapis.rest_apis.sdk
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class GetTransactionDetailsByTransactionIDFromCallbackRIBSTTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "GetTransactionDetailsByTransactionIDFromCallbackRIBST"
     */
    public function testGetTransactionDetailsByTransactionIDFromCallbackRIBST()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "amount"
     */
    public function testPropertyAmount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bandwidth_used"
     */
    public function testPropertyBandwidthUsed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "contract"
     */
    public function testPropertyContract()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "energy_used"
     */
    public function testPropertyEnergyUsed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "has_internal_transactions"
     */
    public function testPropertyHasInternalTransactions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "has_token_transfers"
     */
    public function testPropertyHasTokenTransfers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "input"
     */
    public function testPropertyInput()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recipients"
     */
    public function testPropertyRecipients()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "senders"
     */
    public function testPropertySenders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "transaction_status"
     */
    public function testPropertyTransactionStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
