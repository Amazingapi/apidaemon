<?php
/**
 * AssetsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2023-04-25
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.cryptoapis.rest_apis.sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.cryptoapis.rest_apis.sdk\ApiException;
use com.cryptoapis.rest_apis.sdk\Configuration;
use com.cryptoapis.rest_apis.sdk\HeaderSelector;
use com.cryptoapis.rest_apis.sdk\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAssetDetailsByAssetID' => [
            'application/json',
        ],
        'getAssetDetailsByAssetSymbol' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAssetDetailsByAssetID
     *
     * Get Asset Details By Asset ID
     *
     * @param  string $asset_id Defines the unique ID of the specific asset. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetID'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID400Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID403Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response
     */
    public function getAssetDetailsByAssetID($asset_id, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetID'][0])
    {
        list($response) = $this->getAssetDetailsByAssetIDWithHttpInfo($asset_id, $context, $contentType);
        return $response;
    }

    /**
     * Operation getAssetDetailsByAssetIDWithHttpInfo
     *
     * Get Asset Details By Asset ID
     *
     * @param  string $asset_id Defines the unique ID of the specific asset. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetID'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID400Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID403Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetDetailsByAssetIDWithHttpInfo($asset_id, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetID'][0])
    {
        $request = $this->getAssetDetailsByAssetIDRequest($asset_id, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetID403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetDetailsByAssetIDAsync
     *
     * Get Asset Details By Asset ID
     *
     * @param  string $asset_id Defines the unique ID of the specific asset. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetID'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetDetailsByAssetIDAsync($asset_id, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetID'][0])
    {
        return $this->getAssetDetailsByAssetIDAsyncWithHttpInfo($asset_id, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetDetailsByAssetIDAsyncWithHttpInfo
     *
     * Get Asset Details By Asset ID
     *
     * @param  string $asset_id Defines the unique ID of the specific asset. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetID'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetDetailsByAssetIDAsyncWithHttpInfo($asset_id, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetID'][0])
    {
        $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetIDR';
        $request = $this->getAssetDetailsByAssetIDRequest($asset_id, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetDetailsByAssetID'
     *
     * @param  string $asset_id Defines the unique ID of the specific asset. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetID'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetDetailsByAssetIDRequest($asset_id, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetID'][0])
    {

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling getAssetDetailsByAssetID'
            );
        }



        $resourcePath = '/market-data/assets/assetId/{assetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assetId' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetDetailsByAssetSymbol
     *
     * Get Asset Details By Asset Symbol
     *
     * @param  string $asset_symbol Specifies the asset&#39;s unique symbol in the Crypto APIs listings. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetSymbol'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol400Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol403Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response
     */
    public function getAssetDetailsByAssetSymbol($asset_symbol, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetSymbol'][0])
    {
        list($response) = $this->getAssetDetailsByAssetSymbolWithHttpInfo($asset_symbol, $context, $contentType);
        return $response;
    }

    /**
     * Operation getAssetDetailsByAssetSymbolWithHttpInfo
     *
     * Get Asset Details By Asset Symbol
     *
     * @param  string $asset_symbol Specifies the asset&#39;s unique symbol in the Crypto APIs listings. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetSymbol'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol400Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol403Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetDetailsByAssetSymbolWithHttpInfo($asset_symbol, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetSymbol'][0])
    {
        $request = $this->getAssetDetailsByAssetSymbolRequest($asset_symbol, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbol403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetDetailsByAssetSymbolAsync
     *
     * Get Asset Details By Asset Symbol
     *
     * @param  string $asset_symbol Specifies the asset&#39;s unique symbol in the Crypto APIs listings. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetSymbol'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetDetailsByAssetSymbolAsync($asset_symbol, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetSymbol'][0])
    {
        return $this->getAssetDetailsByAssetSymbolAsyncWithHttpInfo($asset_symbol, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetDetailsByAssetSymbolAsyncWithHttpInfo
     *
     * Get Asset Details By Asset Symbol
     *
     * @param  string $asset_symbol Specifies the asset&#39;s unique symbol in the Crypto APIs listings. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetSymbol'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetDetailsByAssetSymbolAsyncWithHttpInfo($asset_symbol, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetSymbol'][0])
    {
        $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetAssetDetailsByAssetSymbolR';
        $request = $this->getAssetDetailsByAssetSymbolRequest($asset_symbol, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetDetailsByAssetSymbol'
     *
     * @param  string $asset_symbol Specifies the asset&#39;s unique symbol in the Crypto APIs listings. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetDetailsByAssetSymbol'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetDetailsByAssetSymbolRequest($asset_symbol, $context = null, string $contentType = self::contentTypes['getAssetDetailsByAssetSymbol'][0])
    {

        // verify the required parameter 'asset_symbol' is set
        if ($asset_symbol === null || (is_array($asset_symbol) && count($asset_symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_symbol when calling getAssetDetailsByAssetSymbol'
            );
        }



        $resourcePath = '/market-data/assets/{assetSymbol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($asset_symbol !== null) {
            $resourcePath = str_replace(
                '{' . 'assetSymbol' . '}',
                ObjectSerializer::toPathValue($asset_symbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
