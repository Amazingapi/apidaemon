<?php
/**
 * CallbackDataApi
 * PHP version 7.4
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2023-04-25
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.cryptoapis.rest_apis.sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.cryptoapis.rest_apis.sdk\ApiException;
use com.cryptoapis.rest_apis.sdk\Configuration;
use com.cryptoapis.rest_apis.sdk\HeaderSelector;
use com.cryptoapis.rest_apis.sdk\ObjectSerializer;

/**
 * CallbackDataApi Class Doc Comment
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CallbackDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAddressDetailsFromCallback' => [
            'application/json',
        ],
        'getBlockDetailsByBlockHashFromCallback' => [
            'application/json',
        ],
        'getBlockDetailsByBlockHeightFromCallback' => [
            'application/json',
        ],
        'getTransactionDetailsByTransactionIDFromCallback' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAddressDetailsFromCallback
     *
     * Get Address Details From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddressDetailsFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response
     */
    public function getAddressDetailsFromCallback($blockchain, $network, $address, $context = null, string $contentType = self::contentTypes['getAddressDetailsFromCallback'][0])
    {
        list($response) = $this->getAddressDetailsFromCallbackWithHttpInfo($blockchain, $network, $address, $context, $contentType);
        return $response;
    }

    /**
     * Operation getAddressDetailsFromCallbackWithHttpInfo
     *
     * Get Address Details From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddressDetailsFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddressDetailsFromCallbackWithHttpInfo($blockchain, $network, $address, $context = null, string $contentType = self::contentTypes['getAddressDetailsFromCallback'][0])
    {
        $request = $this->getAddressDetailsFromCallbackRequest($blockchain, $network, $address, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallback404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddressDetailsFromCallbackAsync
     *
     * Get Address Details From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddressDetailsFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressDetailsFromCallbackAsync($blockchain, $network, $address, $context = null, string $contentType = self::contentTypes['getAddressDetailsFromCallback'][0])
    {
        return $this->getAddressDetailsFromCallbackAsyncWithHttpInfo($blockchain, $network, $address, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddressDetailsFromCallbackAsyncWithHttpInfo
     *
     * Get Address Details From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddressDetailsFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressDetailsFromCallbackAsyncWithHttpInfo($blockchain, $network, $address, $context = null, string $contentType = self::contentTypes['getAddressDetailsFromCallback'][0])
    {
        $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetAddressDetailsFromCallbackR';
        $request = $this->getAddressDetailsFromCallbackRequest($blockchain, $network, $address, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddressDetailsFromCallback'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $address Represents the public address, which is a compressed and shortened form of a public key. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAddressDetailsFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAddressDetailsFromCallbackRequest($blockchain, $network, $address, $context = null, string $contentType = self::contentTypes['getAddressDetailsFromCallback'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getAddressDetailsFromCallback'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getAddressDetailsFromCallback'
            );
        }

        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling getAddressDetailsFromCallback'
            );
        }



        $resourcePath = '/blockchain-events/{blockchain}/{network}/addresses/{address}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBlockDetailsByBlockHashFromCallback
     *
     * Get Block Details By Block Hash From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $block_hash Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHashFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response
     */
    public function getBlockDetailsByBlockHashFromCallback($blockchain, $network, $block_hash, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHashFromCallback'][0])
    {
        list($response) = $this->getBlockDetailsByBlockHashFromCallbackWithHttpInfo($blockchain, $network, $block_hash, $context, $contentType);
        return $response;
    }

    /**
     * Operation getBlockDetailsByBlockHashFromCallbackWithHttpInfo
     *
     * Get Block Details By Block Hash From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $block_hash Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHashFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBlockDetailsByBlockHashFromCallbackWithHttpInfo($blockchain, $network, $block_hash, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHashFromCallback'][0])
    {
        $request = $this->getBlockDetailsByBlockHashFromCallbackRequest($blockchain, $network, $block_hash, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallback403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBlockDetailsByBlockHashFromCallbackAsync
     *
     * Get Block Details By Block Hash From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $block_hash Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHashFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockDetailsByBlockHashFromCallbackAsync($blockchain, $network, $block_hash, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHashFromCallback'][0])
    {
        return $this->getBlockDetailsByBlockHashFromCallbackAsyncWithHttpInfo($blockchain, $network, $block_hash, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBlockDetailsByBlockHashFromCallbackAsyncWithHttpInfo
     *
     * Get Block Details By Block Hash From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $block_hash Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHashFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockDetailsByBlockHashFromCallbackAsyncWithHttpInfo($blockchain, $network, $block_hash, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHashFromCallback'][0])
    {
        $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHashFromCallbackR';
        $request = $this->getBlockDetailsByBlockHashFromCallbackRequest($blockchain, $network, $block_hash, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBlockDetailsByBlockHashFromCallback'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $block_hash Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHashFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBlockDetailsByBlockHashFromCallbackRequest($blockchain, $network, $block_hash, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHashFromCallback'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getBlockDetailsByBlockHashFromCallback'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getBlockDetailsByBlockHashFromCallback'
            );
        }

        // verify the required parameter 'block_hash' is set
        if ($block_hash === null || (is_array($block_hash) && count($block_hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_hash when calling getBlockDetailsByBlockHashFromCallback'
            );
        }



        $resourcePath = '/blockchain-events/{blockchain}/{network}/blocks/hash/{blockHash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($block_hash !== null) {
            $resourcePath = str_replace(
                '{' . 'blockHash' . '}',
                ObjectSerializer::toPathValue($block_hash),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBlockDetailsByBlockHeightFromCallback
     *
     * Get Block Details By Block Height From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $block_height Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHeightFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response
     */
    public function getBlockDetailsByBlockHeightFromCallback($blockchain, $network, $block_height, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHeightFromCallback'][0])
    {
        list($response) = $this->getBlockDetailsByBlockHeightFromCallbackWithHttpInfo($blockchain, $network, $block_height, $context, $contentType);
        return $response;
    }

    /**
     * Operation getBlockDetailsByBlockHeightFromCallbackWithHttpInfo
     *
     * Get Block Details By Block Height From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $block_height Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHeightFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBlockDetailsByBlockHeightFromCallbackWithHttpInfo($blockchain, $network, $block_height, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHeightFromCallback'][0])
    {
        $request = $this->getBlockDetailsByBlockHeightFromCallbackRequest($blockchain, $network, $block_height, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallback403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ListTransactionsByBlockHeight404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBlockDetailsByBlockHeightFromCallbackAsync
     *
     * Get Block Details By Block Height From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $block_height Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHeightFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockDetailsByBlockHeightFromCallbackAsync($blockchain, $network, $block_height, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHeightFromCallback'][0])
    {
        return $this->getBlockDetailsByBlockHeightFromCallbackAsyncWithHttpInfo($blockchain, $network, $block_height, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBlockDetailsByBlockHeightFromCallbackAsyncWithHttpInfo
     *
     * Get Block Details By Block Height From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $block_height Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHeightFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockDetailsByBlockHeightFromCallbackAsyncWithHttpInfo($blockchain, $network, $block_height, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHeightFromCallback'][0])
    {
        $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetBlockDetailsByBlockHeightFromCallbackR';
        $request = $this->getBlockDetailsByBlockHeightFromCallbackRequest($blockchain, $network, $block_height, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBlockDetailsByBlockHeightFromCallback'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;goerli\&quot; are test networks. (required)
     * @param  string $block_height Represents the number of blocks in the blockchain preceding this specific block. Block numbers have no gaps. A blockchain usually starts with block 0 called the \&quot;Genesis block\&quot;. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBlockDetailsByBlockHeightFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBlockDetailsByBlockHeightFromCallbackRequest($blockchain, $network, $block_height, $context = null, string $contentType = self::contentTypes['getBlockDetailsByBlockHeightFromCallback'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getBlockDetailsByBlockHeightFromCallback'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getBlockDetailsByBlockHeightFromCallback'
            );
        }

        // verify the required parameter 'block_height' is set
        if ($block_height === null || (is_array($block_height) && count($block_height) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_height when calling getBlockDetailsByBlockHeightFromCallback'
            );
        }



        $resourcePath = '/blockchain-events/{blockchain}/{network}/blocks/height/{blockHeight}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($block_height !== null) {
            $resourcePath = str_replace(
                '{' . 'blockHeight' . '}',
                ObjectSerializer::toPathValue($block_height),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionDetailsByTransactionIDFromCallback
     *
     * Get Transaction Details By Transaction ID From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $transaction_id Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\GetXRPRippleTransactionDetailsByTransactionID404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response
     */
    public function getTransactionDetailsByTransactionIDFromCallback($blockchain, $network, $transaction_id, $context = null, string $contentType = self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'][0])
    {
        list($response) = $this->getTransactionDetailsByTransactionIDFromCallbackWithHttpInfo($blockchain, $network, $transaction_id, $context, $contentType);
        return $response;
    }

    /**
     * Operation getTransactionDetailsByTransactionIDFromCallbackWithHttpInfo
     *
     * Get Transaction Details By Transaction ID From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $transaction_id Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'] to see the possible values for this operation
     *
     * @throws \com.cryptoapis.rest_apis.sdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR|\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback400Response|\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback401Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response|\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback403Response|\com.cryptoapis.rest_apis.sdk\Model\GetXRPRippleTransactionDetailsByTransactionID404Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response|\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionDetailsByTransactionIDFromCallbackWithHttpInfo($blockchain, $network, $transaction_id, $context = null, string $contentType = self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'][0])
    {
        $request = $this->getTransactionDetailsByTransactionIDFromCallbackRequest($blockchain, $network, $transaction_id, $context, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback403Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback403Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback403Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\GetXRPRippleTransactionDetailsByTransactionID404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\GetXRPRippleTransactionDetailsByTransactionID404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\GetXRPRippleTransactionDetailsByTransactionID404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress402Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallback403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\GetXRPRippleTransactionDetailsByTransactionID404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress409Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress415Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.cryptoapis.rest_apis.sdk\Model\ConvertBitcoinCashAddress500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionDetailsByTransactionIDFromCallbackAsync
     *
     * Get Transaction Details By Transaction ID From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $transaction_id Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionDetailsByTransactionIDFromCallbackAsync($blockchain, $network, $transaction_id, $context = null, string $contentType = self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'][0])
    {
        return $this->getTransactionDetailsByTransactionIDFromCallbackAsyncWithHttpInfo($blockchain, $network, $transaction_id, $context, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionDetailsByTransactionIDFromCallbackAsyncWithHttpInfo
     *
     * Get Transaction Details By Transaction ID From Callback
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $transaction_id Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionDetailsByTransactionIDFromCallbackAsyncWithHttpInfo($blockchain, $network, $transaction_id, $context = null, string $contentType = self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'][0])
    {
        $returnType = '\com.cryptoapis.rest_apis.sdk\Model\GetTransactionDetailsByTransactionIDFromCallbackR';
        $request = $this->getTransactionDetailsByTransactionIDFromCallbackRequest($blockchain, $network, $transaction_id, $context, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionDetailsByTransactionIDFromCallback'
     *
     * @param  string $blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
     * @param  string $network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \&quot;mainnet\&quot; is the live network with actual data while networks like \&quot;testnet\&quot;, \&quot;ropsten\&quot; are test networks. (required)
     * @param  string $transaction_id Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain. (required)
     * @param  string $context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. &#x60;context&#x60; is specified by the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionDetailsByTransactionIDFromCallbackRequest($blockchain, $network, $transaction_id, $context = null, string $contentType = self::contentTypes['getTransactionDetailsByTransactionIDFromCallback'][0])
    {

        // verify the required parameter 'blockchain' is set
        if ($blockchain === null || (is_array($blockchain) && count($blockchain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchain when calling getTransactionDetailsByTransactionIDFromCallback'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getTransactionDetailsByTransactionIDFromCallback'
            );
        }

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getTransactionDetailsByTransactionIDFromCallback'
            );
        }



        $resourcePath = '/blockchain-events/{blockchain}/{network}/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context,
            'context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($blockchain !== null) {
            $resourcePath = str_replace(
                '{' . 'blockchain' . '}',
                ObjectSerializer::toPathValue($blockchain),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
