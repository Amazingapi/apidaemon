<?php
/**
 * ListLatestMinedBlocksRIBS
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2023-04-25
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.cryptoapis.rest_apis.sdk\Model;

use \ArrayAccess;
use \com.cryptoapis.rest_apis.sdk\ObjectSerializer;

/**
 * ListLatestMinedBlocksRIBS Class Doc Comment
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListLatestMinedBlocksRIBS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListLatestMinedBlocksRIBS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bits' => 'string',
        'chainwork' => 'string',
        'difficulty' => 'string',
        'merkle_root' => 'string',
        'nonce' => 'string',
        'size' => 'int',
        'stripped_size' => 'int',
        'version' => 'int',
        'version_hex' => 'string',
        'weight' => 'int',
        'extra_data' => 'string',
        'gas_limit' => 'string',
        'gas_used' => 'string',
        'mined_in_seconds' => 'int',
        'sha3_uncles' => 'string',
        'total_difficulty' => 'string',
        'uncles' => 'string[]',
        'total_coins' => 'string',
        'total_fees' => '\com.cryptoapis.rest_apis.sdk\Model\ListLatestMinedBlocksRIBSXTotalFees',
        'bandwidth_used' => 'string',
        'burned_trx' => 'string',
        'energy_used' => 'string',
        'base_fee' => 'string',
        'base_reserve' => 'string',
        'failed_transactions' => 'int',
        'protocol_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bits' => null,
        'chainwork' => null,
        'difficulty' => null,
        'merkle_root' => null,
        'nonce' => null,
        'size' => null,
        'stripped_size' => null,
        'version' => null,
        'version_hex' => null,
        'weight' => null,
        'extra_data' => null,
        'gas_limit' => null,
        'gas_used' => null,
        'mined_in_seconds' => null,
        'sha3_uncles' => null,
        'total_difficulty' => null,
        'uncles' => null,
        'total_coins' => null,
        'total_fees' => null,
        'bandwidth_used' => null,
        'burned_trx' => null,
        'energy_used' => null,
        'base_fee' => null,
        'base_reserve' => null,
        'failed_transactions' => null,
        'protocol_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bits' => false,
        'chainwork' => false,
        'difficulty' => false,
        'merkle_root' => false,
        'nonce' => false,
        'size' => false,
        'stripped_size' => false,
        'version' => false,
        'version_hex' => false,
        'weight' => false,
        'extra_data' => false,
        'gas_limit' => false,
        'gas_used' => false,
        'mined_in_seconds' => false,
        'sha3_uncles' => false,
        'total_difficulty' => false,
        'uncles' => false,
        'total_coins' => false,
        'total_fees' => false,
        'bandwidth_used' => false,
        'burned_trx' => false,
        'energy_used' => false,
        'base_fee' => false,
        'base_reserve' => false,
        'failed_transactions' => false,
        'protocol_version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bits' => 'bits',
        'chainwork' => 'chainwork',
        'difficulty' => 'difficulty',
        'merkle_root' => 'merkleRoot',
        'nonce' => 'nonce',
        'size' => 'size',
        'stripped_size' => 'strippedSize',
        'version' => 'version',
        'version_hex' => 'versionHex',
        'weight' => 'weight',
        'extra_data' => 'extraData',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'mined_in_seconds' => 'minedInSeconds',
        'sha3_uncles' => 'sha3Uncles',
        'total_difficulty' => 'totalDifficulty',
        'uncles' => 'uncles',
        'total_coins' => 'totalCoins',
        'total_fees' => 'totalFees',
        'bandwidth_used' => 'bandwidthUsed',
        'burned_trx' => 'burnedTRX',
        'energy_used' => 'energyUsed',
        'base_fee' => 'baseFee',
        'base_reserve' => 'baseReserve',
        'failed_transactions' => 'failedTransactions',
        'protocol_version' => 'protocolVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bits' => 'setBits',
        'chainwork' => 'setChainwork',
        'difficulty' => 'setDifficulty',
        'merkle_root' => 'setMerkleRoot',
        'nonce' => 'setNonce',
        'size' => 'setSize',
        'stripped_size' => 'setStrippedSize',
        'version' => 'setVersion',
        'version_hex' => 'setVersionHex',
        'weight' => 'setWeight',
        'extra_data' => 'setExtraData',
        'gas_limit' => 'setGasLimit',
        'gas_used' => 'setGasUsed',
        'mined_in_seconds' => 'setMinedInSeconds',
        'sha3_uncles' => 'setSha3Uncles',
        'total_difficulty' => 'setTotalDifficulty',
        'uncles' => 'setUncles',
        'total_coins' => 'setTotalCoins',
        'total_fees' => 'setTotalFees',
        'bandwidth_used' => 'setBandwidthUsed',
        'burned_trx' => 'setBurnedTrx',
        'energy_used' => 'setEnergyUsed',
        'base_fee' => 'setBaseFee',
        'base_reserve' => 'setBaseReserve',
        'failed_transactions' => 'setFailedTransactions',
        'protocol_version' => 'setProtocolVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bits' => 'getBits',
        'chainwork' => 'getChainwork',
        'difficulty' => 'getDifficulty',
        'merkle_root' => 'getMerkleRoot',
        'nonce' => 'getNonce',
        'size' => 'getSize',
        'stripped_size' => 'getStrippedSize',
        'version' => 'getVersion',
        'version_hex' => 'getVersionHex',
        'weight' => 'getWeight',
        'extra_data' => 'getExtraData',
        'gas_limit' => 'getGasLimit',
        'gas_used' => 'getGasUsed',
        'mined_in_seconds' => 'getMinedInSeconds',
        'sha3_uncles' => 'getSha3Uncles',
        'total_difficulty' => 'getTotalDifficulty',
        'uncles' => 'getUncles',
        'total_coins' => 'getTotalCoins',
        'total_fees' => 'getTotalFees',
        'bandwidth_used' => 'getBandwidthUsed',
        'burned_trx' => 'getBurnedTrx',
        'energy_used' => 'getEnergyUsed',
        'base_fee' => 'getBaseFee',
        'base_reserve' => 'getBaseReserve',
        'failed_transactions' => 'getFailedTransactions',
        'protocol_version' => 'getProtocolVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bits', $data ?? [], null);
        $this->setIfExists('chainwork', $data ?? [], null);
        $this->setIfExists('difficulty', $data ?? [], null);
        $this->setIfExists('merkle_root', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('stripped_size', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('version_hex', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('extra_data', $data ?? [], null);
        $this->setIfExists('gas_limit', $data ?? [], null);
        $this->setIfExists('gas_used', $data ?? [], null);
        $this->setIfExists('mined_in_seconds', $data ?? [], null);
        $this->setIfExists('sha3_uncles', $data ?? [], null);
        $this->setIfExists('total_difficulty', $data ?? [], null);
        $this->setIfExists('uncles', $data ?? [], null);
        $this->setIfExists('total_coins', $data ?? [], null);
        $this->setIfExists('total_fees', $data ?? [], null);
        $this->setIfExists('bandwidth_used', $data ?? [], null);
        $this->setIfExists('burned_trx', $data ?? [], null);
        $this->setIfExists('energy_used', $data ?? [], null);
        $this->setIfExists('base_fee', $data ?? [], null);
        $this->setIfExists('base_reserve', $data ?? [], null);
        $this->setIfExists('failed_transactions', $data ?? [], null);
        $this->setIfExists('protocol_version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bits'] === null) {
            $invalidProperties[] = "'bits' can't be null";
        }
        if ($this->container['chainwork'] === null) {
            $invalidProperties[] = "'chainwork' can't be null";
        }
        if ($this->container['difficulty'] === null) {
            $invalidProperties[] = "'difficulty' can't be null";
        }
        if ($this->container['merkle_root'] === null) {
            $invalidProperties[] = "'merkle_root' can't be null";
        }
        if ($this->container['nonce'] === null) {
            $invalidProperties[] = "'nonce' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['stripped_size'] === null) {
            $invalidProperties[] = "'stripped_size' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['version_hex'] === null) {
            $invalidProperties[] = "'version_hex' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['extra_data'] === null) {
            $invalidProperties[] = "'extra_data' can't be null";
        }
        if ($this->container['gas_limit'] === null) {
            $invalidProperties[] = "'gas_limit' can't be null";
        }
        if ($this->container['gas_used'] === null) {
            $invalidProperties[] = "'gas_used' can't be null";
        }
        if ($this->container['mined_in_seconds'] === null) {
            $invalidProperties[] = "'mined_in_seconds' can't be null";
        }
        if ($this->container['sha3_uncles'] === null) {
            $invalidProperties[] = "'sha3_uncles' can't be null";
        }
        if ($this->container['total_difficulty'] === null) {
            $invalidProperties[] = "'total_difficulty' can't be null";
        }
        if ($this->container['uncles'] === null) {
            $invalidProperties[] = "'uncles' can't be null";
        }
        if ($this->container['total_coins'] === null) {
            $invalidProperties[] = "'total_coins' can't be null";
        }
        if ($this->container['total_fees'] === null) {
            $invalidProperties[] = "'total_fees' can't be null";
        }
        if ($this->container['base_fee'] === null) {
            $invalidProperties[] = "'base_fee' can't be null";
        }
        if ($this->container['base_reserve'] === null) {
            $invalidProperties[] = "'base_reserve' can't be null";
        }
        if ($this->container['failed_transactions'] === null) {
            $invalidProperties[] = "'failed_transactions' can't be null";
        }
        if ($this->container['protocol_version'] === null) {
            $invalidProperties[] = "'protocol_version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bits
     *
     * @return string
     */
    public function getBits()
    {
        return $this->container['bits'];
    }

    /**
     * Sets bits
     *
     * @param string $bits Represents a specific sub-unit of Zcash. Bits have two-decimal precision
     *
     * @return self
     */
    public function setBits($bits)
    {
        if (is_null($bits)) {
            throw new \InvalidArgumentException('non-nullable bits cannot be null');
        }
        $this->container['bits'] = $bits;

        return $this;
    }

    /**
     * Gets chainwork
     *
     * @return string
     */
    public function getChainwork()
    {
        return $this->container['chainwork'];
    }

    /**
     * Sets chainwork
     *
     * @param string $chainwork Represents a hexadecimal number of all the hashes necessary to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
     *
     * @return self
     */
    public function setChainwork($chainwork)
    {
        if (is_null($chainwork)) {
            throw new \InvalidArgumentException('non-nullable chainwork cannot be null');
        }
        $this->container['chainwork'] = $chainwork;

        return $this;
    }

    /**
     * Gets difficulty
     *
     * @return string
     */
    public function getDifficulty()
    {
        return $this->container['difficulty'];
    }

    /**
     * Sets difficulty
     *
     * @param string $difficulty Represents a mathematical value of how hard it is to find a valid hash for this block.
     *
     * @return self
     */
    public function setDifficulty($difficulty)
    {
        if (is_null($difficulty)) {
            throw new \InvalidArgumentException('non-nullable difficulty cannot be null');
        }
        $this->container['difficulty'] = $difficulty;

        return $this;
    }

    /**
     * Gets merkle_root
     *
     * @return string
     */
    public function getMerkleRoot()
    {
        return $this->container['merkle_root'];
    }

    /**
     * Sets merkle_root
     *
     * @param string $merkle_root Defines the single and final (root) node of a Merkle tree. It is the combined hash of all transactions' hashes that are part of a blockchain block.
     *
     * @return self
     */
    public function setMerkleRoot($merkle_root)
    {
        if (is_null($merkle_root)) {
            throw new \InvalidArgumentException('non-nullable merkle_root cannot be null');
        }
        $this->container['merkle_root'] = $merkle_root;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce Represents a random value that can be adjusted to satisfy the proof of work
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            throw new \InvalidArgumentException('non-nullable nonce cannot be null');
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Represents the total size of the block in Bytes.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets stripped_size
     *
     * @return int
     */
    public function getStrippedSize()
    {
        return $this->container['stripped_size'];
    }

    /**
     * Sets stripped_size
     *
     * @param int $stripped_size Defines the numeric representation of the block size excluding the witness data.
     *
     * @return self
     */
    public function setStrippedSize($stripped_size)
    {
        if (is_null($stripped_size)) {
            throw new \InvalidArgumentException('non-nullable stripped_size cannot be null');
        }
        $this->container['stripped_size'] = $stripped_size;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Represents the transaction version number.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets version_hex
     *
     * @return string
     */
    public function getVersionHex()
    {
        return $this->container['version_hex'];
    }

    /**
     * Sets version_hex
     *
     * @param string $version_hex Is the hexadecimal string representation of the block's version.
     *
     * @return self
     */
    public function setVersionHex($version_hex)
    {
        if (is_null($version_hex)) {
            throw new \InvalidArgumentException('non-nullable version_hex cannot be null');
        }
        $this->container['version_hex'] = $version_hex;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight Represents a measurement to compare the size of different transactions to each other in proportion to the block size limit.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return string
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param string $extra_data Represents any data that can be included by the miner in the block.
     *
     * @return self
     */
    public function setExtraData($extra_data)
    {
        if (is_null($extra_data)) {
            throw new \InvalidArgumentException('non-nullable extra_data cannot be null');
        }
        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets gas_limit
     *
     * @return string
     */
    public function getGasLimit()
    {
        return $this->container['gas_limit'];
    }

    /**
     * Sets gas_limit
     *
     * @param string $gas_limit Defines the total gas limit of all transactions in the block.
     *
     * @return self
     */
    public function setGasLimit($gas_limit)
    {
        if (is_null($gas_limit)) {
            throw new \InvalidArgumentException('non-nullable gas_limit cannot be null');
        }
        $this->container['gas_limit'] = $gas_limit;

        return $this;
    }

    /**
     * Gets gas_used
     *
     * @return string
     */
    public function getGasUsed()
    {
        return $this->container['gas_used'];
    }

    /**
     * Sets gas_used
     *
     * @param string $gas_used Represents the total amount of gas used by all transactions in this block.
     *
     * @return self
     */
    public function setGasUsed($gas_used)
    {
        if (is_null($gas_used)) {
            throw new \InvalidArgumentException('non-nullable gas_used cannot be null');
        }
        $this->container['gas_used'] = $gas_used;

        return $this;
    }

    /**
     * Gets mined_in_seconds
     *
     * @return int
     */
    public function getMinedInSeconds()
    {
        return $this->container['mined_in_seconds'];
    }

    /**
     * Sets mined_in_seconds
     *
     * @param int $mined_in_seconds Specifies the amount of time required for the block to be mined in second
     *
     * @return self
     */
    public function setMinedInSeconds($mined_in_seconds)
    {
        if (is_null($mined_in_seconds)) {
            throw new \InvalidArgumentException('non-nullable mined_in_seconds cannot be null');
        }
        $this->container['mined_in_seconds'] = $mined_in_seconds;

        return $this;
    }

    /**
     * Gets sha3_uncles
     *
     * @return string
     */
    public function getSha3Uncles()
    {
        return $this->container['sha3_uncles'];
    }

    /**
     * Sets sha3_uncles
     *
     * @param string $sha3_uncles Defines the combined hash of all uncles for a given parent.
     *
     * @return self
     */
    public function setSha3Uncles($sha3_uncles)
    {
        if (is_null($sha3_uncles)) {
            throw new \InvalidArgumentException('non-nullable sha3_uncles cannot be null');
        }
        $this->container['sha3_uncles'] = $sha3_uncles;

        return $this;
    }

    /**
     * Gets total_difficulty
     *
     * @return string
     */
    public function getTotalDifficulty()
    {
        return $this->container['total_difficulty'];
    }

    /**
     * Sets total_difficulty
     *
     * @param string $total_difficulty Defines the total difficulty of the chain until this block, i.e. how difficult it is for a specific miner to mine a new block
     *
     * @return self
     */
    public function setTotalDifficulty($total_difficulty)
    {
        if (is_null($total_difficulty)) {
            throw new \InvalidArgumentException('non-nullable total_difficulty cannot be null');
        }
        $this->container['total_difficulty'] = $total_difficulty;

        return $this;
    }

    /**
     * Gets uncles
     *
     * @return string[]
     */
    public function getUncles()
    {
        return $this->container['uncles'];
    }

    /**
     * Sets uncles
     *
     * @param string[] $uncles uncles
     *
     * @return self
     */
    public function setUncles($uncles)
    {
        if (is_null($uncles)) {
            throw new \InvalidArgumentException('non-nullable uncles cannot be null');
        }
        $this->container['uncles'] = $uncles;

        return $this;
    }

    /**
     * Gets total_coins
     *
     * @return string
     */
    public function getTotalCoins()
    {
        return $this->container['total_coins'];
    }

    /**
     * Sets total_coins
     *
     * @param string $total_coins Representation of the total coins
     *
     * @return self
     */
    public function setTotalCoins($total_coins)
    {
        if (is_null($total_coins)) {
            throw new \InvalidArgumentException('non-nullable total_coins cannot be null');
        }
        $this->container['total_coins'] = $total_coins;

        return $this;
    }

    /**
     * Gets total_fees
     *
     * @return \com.cryptoapis.rest_apis.sdk\Model\ListLatestMinedBlocksRIBSXTotalFees
     */
    public function getTotalFees()
    {
        return $this->container['total_fees'];
    }

    /**
     * Sets total_fees
     *
     * @param \com.cryptoapis.rest_apis.sdk\Model\ListLatestMinedBlocksRIBSXTotalFees $total_fees total_fees
     *
     * @return self
     */
    public function setTotalFees($total_fees)
    {
        if (is_null($total_fees)) {
            throw new \InvalidArgumentException('non-nullable total_fees cannot be null');
        }
        $this->container['total_fees'] = $total_fees;

        return $this;
    }

    /**
     * Gets bandwidth_used
     *
     * @return string|null
     */
    public function getBandwidthUsed()
    {
        return $this->container['bandwidth_used'];
    }

    /**
     * Sets bandwidth_used
     *
     * @param string|null $bandwidth_used Representation of the blocks' bandwidth limit.
     *
     * @return self
     */
    public function setBandwidthUsed($bandwidth_used)
    {
        if (is_null($bandwidth_used)) {
            throw new \InvalidArgumentException('non-nullable bandwidth_used cannot be null');
        }
        $this->container['bandwidth_used'] = $bandwidth_used;

        return $this;
    }

    /**
     * Gets burned_trx
     *
     * @return string|null
     */
    public function getBurnedTrx()
    {
        return $this->container['burned_trx'];
    }

    /**
     * Sets burned_trx
     *
     * @param string|null $burned_trx Representation of the blocks' burned TRX.
     *
     * @return self
     */
    public function setBurnedTrx($burned_trx)
    {
        if (is_null($burned_trx)) {
            throw new \InvalidArgumentException('non-nullable burned_trx cannot be null');
        }
        $this->container['burned_trx'] = $burned_trx;

        return $this;
    }

    /**
     * Gets energy_used
     *
     * @return string|null
     */
    public function getEnergyUsed()
    {
        return $this->container['energy_used'];
    }

    /**
     * Sets energy_used
     *
     * @param string|null $energy_used Representation of the blocks' energy used.
     *
     * @return self
     */
    public function setEnergyUsed($energy_used)
    {
        if (is_null($energy_used)) {
            throw new \InvalidArgumentException('non-nullable energy_used cannot be null');
        }
        $this->container['energy_used'] = $energy_used;

        return $this;
    }

    /**
     * Gets base_fee
     *
     * @return string
     */
    public function getBaseFee()
    {
        return $this->container['base_fee'];
    }

    /**
     * Sets base_fee
     *
     * @param string $base_fee Representation of the base fee
     *
     * @return self
     */
    public function setBaseFee($base_fee)
    {
        if (is_null($base_fee)) {
            throw new \InvalidArgumentException('non-nullable base_fee cannot be null');
        }
        $this->container['base_fee'] = $base_fee;

        return $this;
    }

    /**
     * Gets base_reserve
     *
     * @return string
     */
    public function getBaseReserve()
    {
        return $this->container['base_reserve'];
    }

    /**
     * Sets base_reserve
     *
     * @param string $base_reserve Representation of the base reserve that refers to the minimum amount of XLM (the native cryptocurrency of the Stellar network) that an account must hold as a reserve as minimum balance.
     *
     * @return self
     */
    public function setBaseReserve($base_reserve)
    {
        if (is_null($base_reserve)) {
            throw new \InvalidArgumentException('non-nullable base_reserve cannot be null');
        }
        $this->container['base_reserve'] = $base_reserve;

        return $this;
    }

    /**
     * Gets failed_transactions
     *
     * @return int
     */
    public function getFailedTransactions()
    {
        return $this->container['failed_transactions'];
    }

    /**
     * Sets failed_transactions
     *
     * @param int $failed_transactions Representation of the blocks' failed transactions count
     *
     * @return self
     */
    public function setFailedTransactions($failed_transactions)
    {
        if (is_null($failed_transactions)) {
            throw new \InvalidArgumentException('non-nullable failed_transactions cannot be null');
        }
        $this->container['failed_transactions'] = $failed_transactions;

        return $this;
    }

    /**
     * Gets protocol_version
     *
     * @return string
     */
    public function getProtocolVersion()
    {
        return $this->container['protocol_version'];
    }

    /**
     * Sets protocol_version
     *
     * @param string $protocol_version Representation of protocol version which refers to the specific set of rules and standards that govern the behavior of the network's nodes and participants.
     *
     * @return self
     */
    public function setProtocolVersion($protocol_version)
    {
        if (is_null($protocol_version)) {
            throw new \InvalidArgumentException('non-nullable protocol_version cannot be null');
        }
        $this->container['protocol_version'] = $protocol_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


