<?php
/**
 * PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2023-04-25
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.cryptoapis.rest_apis.sdk\Model;

use \ArrayAccess;
use \com.cryptoapis.rest_apis.sdk\ObjectSerializer;

/**
 * PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST Class Doc Comment
 *
 * @category Class
 * @description Tron
 * @package  com.cryptoapis.rest_apis.sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data' => 'string',
        'derivation_index' => 'string',
        'expiration' => 'int',
        'raw_data' => '\com.cryptoapis.rest_apis.sdk\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData',
        'raw_data_hex' => 'string',
        'recipient' => 'string',
        'ref_block_bytes' => 'string',
        'ref_block_hash' => 'string',
        'sender' => 'string',
        'timestamp' => 'int',
        'transaction_id' => 'string',
        'type' => 'string',
        'type_url' => 'string',
        'unit' => 'string',
        'visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data' => null,
        'derivation_index' => null,
        'expiration' => null,
        'raw_data' => null,
        'raw_data_hex' => null,
        'recipient' => null,
        'ref_block_bytes' => null,
        'ref_block_hash' => null,
        'sender' => null,
        'timestamp' => null,
        'transaction_id' => null,
        'type' => null,
        'type_url' => null,
        'unit' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data' => false,
        'derivation_index' => false,
        'expiration' => false,
        'raw_data' => false,
        'raw_data_hex' => false,
        'recipient' => false,
        'ref_block_bytes' => false,
        'ref_block_hash' => false,
        'sender' => false,
        'timestamp' => false,
        'transaction_id' => false,
        'type' => false,
        'type_url' => false,
        'unit' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data' => 'data',
        'derivation_index' => 'derivationIndex',
        'expiration' => 'expiration',
        'raw_data' => 'rawData',
        'raw_data_hex' => 'rawDataHex',
        'recipient' => 'recipient',
        'ref_block_bytes' => 'refBlockBytes',
        'ref_block_hash' => 'refBlockHash',
        'sender' => 'sender',
        'timestamp' => 'timestamp',
        'transaction_id' => 'transactionId',
        'type' => 'type',
        'type_url' => 'typeUrl',
        'unit' => 'unit',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data' => 'setData',
        'derivation_index' => 'setDerivationIndex',
        'expiration' => 'setExpiration',
        'raw_data' => 'setRawData',
        'raw_data_hex' => 'setRawDataHex',
        'recipient' => 'setRecipient',
        'ref_block_bytes' => 'setRefBlockBytes',
        'ref_block_hash' => 'setRefBlockHash',
        'sender' => 'setSender',
        'timestamp' => 'setTimestamp',
        'transaction_id' => 'setTransactionId',
        'type' => 'setType',
        'type_url' => 'setTypeUrl',
        'unit' => 'setUnit',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data' => 'getData',
        'derivation_index' => 'getDerivationIndex',
        'expiration' => 'getExpiration',
        'raw_data' => 'getRawData',
        'raw_data_hex' => 'getRawDataHex',
        'recipient' => 'getRecipient',
        'ref_block_bytes' => 'getRefBlockBytes',
        'ref_block_hash' => 'getRefBlockHash',
        'sender' => 'getSender',
        'timestamp' => 'getTimestamp',
        'transaction_id' => 'getTransactionId',
        'type' => 'getType',
        'type_url' => 'getTypeUrl',
        'unit' => 'getUnit',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('derivation_index', $data ?? [], null);
        $this->setIfExists('expiration', $data ?? [], null);
        $this->setIfExists('raw_data', $data ?? [], null);
        $this->setIfExists('raw_data_hex', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('ref_block_bytes', $data ?? [], null);
        $this->setIfExists('ref_block_hash', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('type_url', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['derivation_index'] === null) {
            $invalidProperties[] = "'derivation_index' can't be null";
        }
        if ($this->container['expiration'] === null) {
            $invalidProperties[] = "'expiration' can't be null";
        }
        if ($this->container['raw_data_hex'] === null) {
            $invalidProperties[] = "'raw_data_hex' can't be null";
        }
        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ($this->container['ref_block_bytes'] === null) {
            $invalidProperties[] = "'ref_block_bytes' can't be null";
        }
        if ($this->container['ref_block_hash'] === null) {
            $invalidProperties[] = "'ref_block_hash' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['type_url'] === null) {
            $invalidProperties[] = "'type_url' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalidProperties[] = "'visible' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data String representation of the data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets derivation_index
     *
     * @return string
     */
    public function getDerivationIndex()
    {
        return $this->container['derivation_index'];
    }

    /**
     * Sets derivation_index
     *
     * @param string $derivation_index Representation of the derivation index of the xpub address
     *
     * @return self
     */
    public function setDerivationIndex($derivation_index)
    {
        if (is_null($derivation_index)) {
            throw new \InvalidArgumentException('non-nullable derivation_index cannot be null');
        }
        $this->container['derivation_index'] = $derivation_index;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return int
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param int $expiration Rrepresentation of the expiration value
     *
     * @return self
     */
    public function setExpiration($expiration)
    {
        if (is_null($expiration)) {
            throw new \InvalidArgumentException('non-nullable expiration cannot be null');
        }
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return \com.cryptoapis.rest_apis.sdk\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData|null
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param \com.cryptoapis.rest_apis.sdk\Model\PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData|null $raw_data raw_data
     *
     * @return self
     */
    public function setRawData($raw_data)
    {
        if (is_null($raw_data)) {
            throw new \InvalidArgumentException('non-nullable raw_data cannot be null');
        }
        $this->container['raw_data'] = $raw_data;

        return $this;
    }

    /**
     * Gets raw_data_hex
     *
     * @return string
     */
    public function getRawDataHex()
    {
        return $this->container['raw_data_hex'];
    }

    /**
     * Sets raw_data_hex
     *
     * @param string $raw_data_hex Representation of the raw data in hex format
     *
     * @return self
     */
    public function setRawDataHex($raw_data_hex)
    {
        if (is_null($raw_data_hex)) {
            throw new \InvalidArgumentException('non-nullable raw_data_hex cannot be null');
        }
        $this->container['raw_data_hex'] = $raw_data_hex;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient Rrepresentation of the recipients' address
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets ref_block_bytes
     *
     * @return string
     */
    public function getRefBlockBytes()
    {
        return $this->container['ref_block_bytes'];
    }

    /**
     * Sets ref_block_bytes
     *
     * @param string $ref_block_bytes Representation of the block bytes
     *
     * @return self
     */
    public function setRefBlockBytes($ref_block_bytes)
    {
        if (is_null($ref_block_bytes)) {
            throw new \InvalidArgumentException('non-nullable ref_block_bytes cannot be null');
        }
        $this->container['ref_block_bytes'] = $ref_block_bytes;

        return $this;
    }

    /**
     * Gets ref_block_hash
     *
     * @return string
     */
    public function getRefBlockHash()
    {
        return $this->container['ref_block_hash'];
    }

    /**
     * Sets ref_block_hash
     *
     * @param string $ref_block_hash Representation of the block hash refference
     *
     * @return self
     */
    public function setRefBlockHash($ref_block_hash)
    {
        if (is_null($ref_block_hash)) {
            throw new \InvalidArgumentException('non-nullable ref_block_hash cannot be null');
        }
        $this->container['ref_block_hash'] = $ref_block_hash;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender Representation of the sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp Representation of the timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Represents the reference transaction identifier.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Representation of the transfer type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_url
     *
     * @return string
     */
    public function getTypeUrl()
    {
        return $this->container['type_url'];
    }

    /**
     * Sets type_url
     *
     * @param string $type_url Representation of the URL
     *
     * @return self
     */
    public function setTypeUrl($type_url)
    {
        if (is_null($type_url)) {
            throw new \InvalidArgumentException('non-nullable type_url cannot be null');
        }
        $this->container['type_url'] = $type_url;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit Represents the unit of the amount to be sent.
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible Representation of the address visibility
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


